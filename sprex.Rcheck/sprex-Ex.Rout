
R version 3.1.2 (2014-10-31) -- "Pumpkin Helmet"
Copyright (C) 2014 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "sprex"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "sprex-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('sprex')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("discovery.curve")
> ### * discovery.curve
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: discovery.curve
> ### Title: Discovery Curve
> ### Aliases: discovery.curve
> 
> ### ** Examples
> 
> data(osa.old.growth)
> f <- expand.freqs(osa.old.growth)
> d <- discovery.curve(f, max.x = 1200)
> plot(d)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("discovery.curve", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("expand.freqs")
> ### * expand.freqs
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: expand.freqs
> ### Title: Expand Frequency Matrix
> ### Aliases: expand.freqs
> 
> ### ** Examples
> 
> data(osa.old.growth)
> f <- expand.freqs(osa.old.growth)
> f
 [1] 84 10  4  3  5  1  2  1  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0
[26]  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("expand.freqs", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("expected.num.species")
> ### * expected.num.species
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: expected.num.species
> ### Title: Expected Number of Species
> ### Aliases: expected.num.species
> 
> ### ** Examples
> 
> data(osa.old.growth)
> f <- expand.freqs(osa.old.growth)
> expected.num.species(60, f)
     s.ind   sd.s.ind          m      s.est         f0      s.obs          n 
 39.438316   3.844294  60.000000 463.311392 351.311392 112.000000 237.000000 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("expected.num.species", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("f.stats")
> ### * f.stats
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: f.stats
> ### Title: Frequency Vector Statistics
> ### Aliases: f.stats
> 
> ### ** Examples
> 
> data(osa.second.growth)
> f <- expand.freqs(osa.second.growth)
> f.stats(f)
s.obs     n 
  140   976 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("f.stats", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("f0")
> ### * f0
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: ACE
> ### Title: Number of Unobserved Species
> ### Aliases: ACE Chao1 Swor1 f0 iChao1 jack1 jack2
> 
> ### ** Examples
> 
> data(osa.second.growth)
> f <- expand.freqs(osa.second.growth)
> 
> ace.est <- ACE(f)
> chao1.est <- Chao1(f)
> jack1.est <- jack1(f)
> jack2.est <- jack2(f)
> swor1.est <- Swor1(f, 20000)
> ichao1.est <- iChao1(f)
> 
> f0.est <- cbind(
+   ACE = ace.est["f0"],
+   Chao1 = chao1.est["f0"],
+   jack1 = jack1.est["f0"],
+   jack2 = jack2.est["f0"],
+   Swor1 = swor1.est["f0"],
+   iChao1 = ichao1.est["f0"]
+ )
> f0.est
        ACE  Chao1 jack1 jack2    Swor1   iChao1
f0 133.3986 143.97    70   123 130.2287 156.5739
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("f0", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("num.samples.required")
> ### * num.samples.required
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: num.samples.required
> ### Title: Number of Samples Required
> ### Aliases: num.samples.required
> 
> ### ** Examples
> 
> data(osa.old.growth)
> f <- expand.freqs(osa.old.growth)
> num.samples.required(0.6, f)
     m.g        g    s.est       f0    s.obs        n 
636.6223   0.6000 463.3114 351.3114 112.0000 237.0000 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("num.samples.required", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("sample.to.species.freq")
> ### * sample.to.species.freq
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: sample.to.species.freq
> ### Title: Create Vector of Species Frequencies
> ### Aliases: sample.to.species.freq
> 
> ### ** Examples
> 
> x <- sample(1:100, 30, rep = TRUE)
> f <- sample.to.species.freq(x)
> print(x)
 [1]  27  38  58  91  21  90  95  67  63   7  21  18  69  39  77  50  72 100  39
[20]  78  94  22  66  13  27  39   2  39  87  35
> print(f)
  [1] 0 1 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 1 0 0 2 1 0 0 0 0 2 0 0 0 0 0 0 0 1 0 0
 [38] 1 4 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 1 1 0 1 0 0 1 0 0
 [75] 0 0 1 1 0 0 0 0 0 0 0 0 1 0 0 1 1 0 0 1 1 0 0 0 0 1
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("sample.to.species.freq", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("species.to.sample.freq")
> ### * species.to.sample.freq
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: species.to.sample.freq
> ### Title: Create Vector of Sample Frequencies
> ### Aliases: species.to.sample.freq
> 
> ### ** Examples
> 
> data(osa.old.growth)
> f <- expand.freqs(osa.old.growth)
> x <- species.to.sample.freq(f)
> print(f)
 [1] 84 10  4  3  5  1  2  1  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0
[26]  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1
> print(x)
  [1]  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
 [26]  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
 [51]  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
 [76]  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  2  3  3  3  3  4  4
[101]  4  5  5  5  5  5  6  7  7  8 14 42
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("species.to.sample.freq", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.361 0.006 0.368 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
